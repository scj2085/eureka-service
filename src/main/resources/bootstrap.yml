security:
  basic:
    enabled: true #指定接口需要验证
    path: /admin/**,/* #针对/admin路径进行认证
  user:
    name: shichangjian
    password: 12345666
management:
  port: 1111   #actuator暴露接口使用的端口，为了和api接口使用的端口进行分离
  context-path: /admin   #actuator暴露接口的前缀
  security:
    enabled: true #actuator是否需要安全保证，管理端点暴露，此配置限制了及时动态刷新，问题已解决
   
spring:
  application:
    name: eureka-server
server:
  port: 8761
eureka:
  instance:
    lease-renewal-interval-in-seconds: 30 #定义服务续约任务的调用间隔时间，默认30秒，每30秒检测一次服务提供者的心跳，如检测不到，会执行下面的90秒后此提供者服务会失效
    lease-expiration-duration-in-seconds: 90 #定义服务失效的时间，eureka服务端在收到最后一次心跳之后等待的时间上限，超过时间之后服务端会将该服务实例从服务清单中剔除，从而禁止服务调用请求被发送到该实例上，默认90秒
#    statusPageUrlPath: /${endpoints.info.path} #cloud的端点暴露，风险处理 ，此相对路径以https方式暴露的端点不能访问，必须用下面的配置，使用绝对路径
#    statusPageUrl: https://${erueka.instance.hostname}/info #cloud的端点暴露，风险处理 
#    healthCheckUrlPath: /${endpoints.health.path} #cloud的端点暴露，风险处理 
#    healthCheckUrlPath: https://${erueka.instance.hostname}/health #cloud的端点暴露，风险处理 
    hostname: 127.0.0.1 #注意：127.0.0.1是主机名，代表本服务的ip,特别提醒：不能使用域名，会出现Registered instance APPROVE-CONFIG/shichangjian.ds.gome.com.cn:approve-config:7001 with status UP (replication=false)，主机名不配置的时候将根据操作系统的主机名来获取，
    preferIpAddress: false #是否优先使用ip地址作为主机名的标识，如果改成true，在eureka监控页面，把鼠标放在服务 的实例up上，在左下角就会出现此服务的ip
    nonSecurePort: 80 #非安全的通信端口号，默认80
    securePort: 443 #安全的通信端口号，默认443
    nonSecurePortEnabled: true #是否启用非安全的通信端口号，默认true
#    securePortEnabled: #是否启用安全的通信端口号
#    appname: #服务名，默认取spring.application.name的配置值，如果没有侧为unknown
  
  client:
    enabled: true #启用eureka客户端,默认true
    register-with-eureka: false	#是否要将自身的实例信息注册到注册到eureka服务端，默认true，注册自己，若设置false将不会启动注册操作,在集群中设置true
    fetch-registry: false		#检索服务,是否从eureka服务端获取注册信息，以此配置作为服务获取的逻辑判断，定期更新客户端的服务清单，保证客户端能够访问确实健康的服务实例，服务获取的请求不只限于服务启动时获取，而是一个定时任务的执行，对应的就是下面的这个配置registry-fetch-interval-seconds: 30，服务是服务消费者的基础，在集群中必须确保true
    registry-fetch-interval-seconds: 30 #注册信息，缓存清单的更新时间，从eureka服务端获取注册信息的间隔时间，默认30秒
    instanceInfoReplicationIntervalSeconds: 30 #更新实例信息 的变化到eureka服务端的间隔时间，默认30秒
    initiallnstanceInfoReplicationIntervalSeconds: 40 #初始化实例 信息 到eureka服务端点 的间隔时间，默认40秒
    eurekaServiceUrlPollIntervalSeconds: 300 #轮询eureka服务端地址更改的间隔时间，默认300秒，当我们与spring cloud Config配合，动态刷新erueka的serviceURL地址时需要关注该参数
    eurekaServerReadTimeoutSeconds: 8 #读取Eureka Server信息的超时时间，默认8秒
    eurekaServerConnectTimeoutSeconds: 5 #连接Eureka Server的超时 时间 ，默认5秒
    eurekaServerTotalConnections: 200 #从eureka客户端到所有eureka服务端的连接总数，整个eureka集群总共连接数，默认200个
    eurekaServerTotalConnectionsPerHost: 50 #从eureka客户端到eureka服务端主机的连接总数，eureka集群中的其中一个eureka服务的连接总数，默认50个
    eurekaConnectionIdleTimeoutSeconds: 30 #eureka服务端 连接的 空闲关闭时间，默认30秒
    heartbeatExecutorThreadPoolSize: 2 #心跳连接池的初始化线程数，默认2个
    heartbeatExecutorExponentialBackOffBound: 10 #心跳超时重试延迟时间的最大乘数值，默认10
    cacheRefreshExecutorThreadPoolSize: 2 #缓存刷新线程池的初始化线程数，默认2个
    cacheRefreshExecutorExponentialBackOffBound: 10 #缓存刷新重试延迟时间的最大乘数值，默认10
    useDnsForFetchingServiceUrls: false #使用DNS来获取Eureka服务端的 serviceUrl，默认false
    preferSameZoneEureka: true #是否偏好使用处于相同Zone的eureka服务端，默认true
    filterOnlyUpInstances: true #获取实例时是否过滤，仅保留UP状态的实例
    healthcheck:
      enabled: true #把eureka客户端的健康监测交给spring-boot-actuator模块的health端点，默认情况下不是通过spring-boot-actuator模块的health端点实现的，是根据客户端的心跳实现方式检查客户端进程是否正常运作，但是在eureka服务续约和剔除机制下，客户端服务死掉，还会保留心跳，所以还会被服务消费者调用，得到的健康检查是不准确的。
    
    
    
    serviceUrl:
 #     defaultZone: "http://peer2:8762/eureka/,http://peer3:8763/eureka/" #注意：peer2是eureka2的ip,此端口是eurka2的端口,peer3是eureka3的ip,8763是eureka3的端口，集群的原理是两两互相注册，在/etc/hosts文件中添加对peer1、peer2和peer3的转换，如果不想使用instance，主机名peer1、peer2做注册中心的地址，可以使用ip，但是要配置eureka.instance.prefer-ip-address=true,该值默认false
#      defaultZone: "http://localhost:8761/eureka/"
      defaultZone: "http://shi:123@localhost:8761/eureka/" #在url中加入相应的安全校验信息，客户端服务注册eureka需要添加此用户名和密码
  server:
    enable-self-preservation: false #开发环境可以关闭自我保护机制,以确保注册中心可以将不可用的实例及时正确剔除
    eviction-interval-timer-in-ms: 4000 #清理无效节点的时间间隔
 
#cloud的端点暴露，风险处理  
#endpoints:
#  info:
#    path: /appInfo
#  health:
#    path: /checkHealth  
    